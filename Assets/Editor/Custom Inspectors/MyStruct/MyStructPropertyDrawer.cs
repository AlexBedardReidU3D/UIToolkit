//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by UXML Generator
//     version 0.0.1
//     from ScriptGenerator
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Reflection;
using UnityEditor;
using UnityEngine;
using UnityEditor.UIElements;
using UnityEngine.UIElements;

[CustomPropertyDrawer(typeof(MyStruct))]
public class @MyStructPropertyDrawer : PropertyDrawer
{
    public override VisualElement CreatePropertyGUI(SerializedProperty property)
    {
        // Create a new VisualElement to be the root of our inspector UI
        VisualElement myInspector = new VisualElement();
        myInspector.Add(new Label("This is a custom inspector"));
        // Load and clone a visual tree from UXML
        VisualTreeAsset visualTree = AssetDatabase.LoadAssetAtPath<VisualTreeAsset>("Assets/Editor/Custom Inspectors/MyStruct/MyStructUXML.uxml");
        visualTree.CloneTree(myInspector);

        //----------------------------------------------------------//
        //Button Attribute Calls
        //----------------------------------------------------------//

        var valueTarget = fieldInfo.GetValue(property.serializedObject.targetObject);
        var classType = fieldInfo.FieldType;

        //TestButton Action Callback
        var TestButtonMethod = classType.GetMethod("TestButton", BindingFlags.NonPublic | BindingFlags.Instance);
        myInspector.Q<UnityEngine.UIElements.Button>("TestButton").clickable.clicked += () =>
        {
            TestButtonMethod.Invoke(valueTarget, default);
        };

        //----------------------------------------------------------//

        //----------------------------------------------------------//
        //Conditional Editors
        //----------------------------------------------------------//

        var applicationIsPlaying = Application.isPlaying;

        //----------------------------------------------------------//

        // Return the finished inspector UI
        return myInspector;
    }
}
