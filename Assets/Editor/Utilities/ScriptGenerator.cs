using System;
using System.IO;
using System.Linq;
using System.Text;
using UnityEngine;

namespace Editor
{
    public static class ScriptGenerator
    {
        private const int kSpacesPerIndentLevel = 4;
        //Structs
        //================================================================================================================//
        
        //Based on InputActionGenerator.cs
        private struct Writer
        {
            public StringBuilder buffer;
            public int indentLevel;

            public void BeginBlock()
            {
                WriteIndent();
                buffer.Append("{\n");
                ++indentLevel;
            }

            public void EndBlock()
            {
                --indentLevel;
                WriteIndent();
                buffer.Append("}\n");
            }

            public void WriteLine()
            {
                buffer.Append('\n');
            }

            public void WriteLine(string text)
            {
                if (!text.All(char.IsWhiteSpace))
                {
                    WriteIndent();
                    buffer.Append(text);
                }
                buffer.Append('\n');
            }

            public void Write(string text)
            {
                buffer.Append(text);
            }

            public void WriteIndent()
            {
                for (var i = 0; i < indentLevel; ++i)
                {
                    for (var n = 0; n < kSpacesPerIndentLevel; ++n)
                        buffer.Append(' ');
                }
            }
        }

        //ScriptGenerator Functions
        //================================================================================================================//

        public static void TryCreateCustomEditor(in Type type)
        {
            DirectoryInfo directoryInfo = new DirectoryInfo(Path.Combine(Application.dataPath, "Editor", "Custom Inspectors"));
            
            if(directoryInfo.Exists == false)
                directoryInfo.Create();

            string className = $"{type.Name}CustomInspector";
            string filename = $"{className}.cs";

            //If the file already exists, don't touch it
            if (directoryInfo.GetFiles(filename).Length > 0)
                return;

            string code;
            if (type.IsSubclassOf(typeof(Component)))
            {
                
                //TODO Create Custom Editor
                code = GenerateCustomEditorCode(type, className);
            }
            else
            {
                //TODO Create Property Drawer
                code = GenerateCustomPropertyDrawerCode(type, className);
            }
            
            File.WriteAllText(Path.Combine(directoryInfo.FullName,filename), code);
            
            Debug.Log($"Successfully Generated Custom Inspector for {type.Name}");

        }

        //Code Generation Functions
        //================================================================================================================//

        private static string GenerateCustomEditorCode(in Type type, in string className)
        {
            var writer = new Writer
            {
                buffer = new StringBuilder()
            };

            // Header.
            writer.WriteLine(MakeAutoGeneratedCodeHeader("UXML Generator",
                new Version(0,0,1).ToString(),
                nameof(ScriptGenerator)));
            // Usings.
            writer.WriteLine("using UnityEditor;");
            writer.WriteLine("using UnityEngine.UIElements;");
            writer.WriteLine("");
            
            writer.WriteLine($"[CustomEditor(typeof({type.Name}))]");
            
            // Begin class.
            writer.WriteLine($"public class @{className} : UnityEditor.Editor");
            writer.BeginBlock();
            
            // Default CreateInspectorGUI.
            writer.WriteLine("public override VisualElement CreateInspectorGUI()");
            writer.BeginBlock();
            writer.WriteLine($"// Create a new VisualElement to be the root of our inspector UI");
            writer.WriteLine($"VisualElement myInspector = new VisualElement();");
            writer.WriteLine($"myInspector.Add(new Label(\"This is a custom inspector\"));");
            writer.WriteLine($"// Load and clone a visual tree from UXML");
            writer.WriteLine($"VisualTreeAsset visualTree = AssetDatabase.LoadAssetAtPath<VisualTreeAsset>(\"Assets/Editor/Custom Inspectors/{type.Name}UXML.uxml\");");
            writer.WriteLine($"visualTree.CloneTree(myInspector);");
            writer.WriteLine($"");
            writer.WriteLine($"// Return the finished inspector UI");
            writer.WriteLine($"return myInspector;");
            //End Function
            writer.EndBlock();
            
            //End Class
            writer.EndBlock();
            
            return writer.buffer.ToString();
        }

        private static string GenerateCustomPropertyDrawerCode(in Type type, in string className)
        {
            var writer = new Writer
            {
                buffer = new StringBuilder()
            };

            // Header.
            writer.WriteLine(MakeAutoGeneratedCodeHeader("UXML Generator",
                new Version(0,0,1).ToString(),
                nameof(ScriptGenerator)));
            // Usings.
            writer.WriteLine("using UnityEditor;");
            writer.WriteLine("using UnityEngine.UIElements;");
            writer.WriteLine("");
            
            writer.WriteLine($"[CustomPropertyDrawer(typeof({type.Name}))]");
            
            // Begin class.
            writer.WriteLine($"public class @{className} : PropertyDrawer");
            writer.BeginBlock();
            
            // Default CreateInspectorGUI.
            writer.WriteLine("public override VisualElement CreatePropertyGUI(SerializedProperty property)");
            writer.BeginBlock();
            writer.WriteLine("// Create a new VisualElement to be the root of our inspector UI");
            writer.WriteLine("VisualElement myInspector = new VisualElement();");
            writer.WriteLine("myInspector.Add(new Label(\"This is a custom inspector\"));");
            writer.WriteLine("// Load and clone a visual tree from UXML");
            writer.WriteLine($"VisualTreeAsset visualTree = AssetDatabase.LoadAssetAtPath<VisualTreeAsset>(\"Assets/Editor/Custom Inspectors/{type.Name}UXML.uxml\");");
            writer.WriteLine("visualTree.CloneTree(myInspector);");
            writer.WriteLine("");
            writer.WriteLine("// Return the finished inspector UI");
            writer.WriteLine("return myInspector;");
            //End Function
            writer.EndBlock();
            
            //End Class
            writer.EndBlock();
            
            return writer.buffer.ToString();
        }
        
        //Extras
        //================================================================================================================//

        private static string MakeAutoGeneratedCodeHeader(string toolName, string toolVersion, string sourceFileName = null)
        {
            return
                "//------------------------------------------------------------------------------\n"
                + "// <auto-generated>\n"
                + $"//     This code was auto-generated by {toolName}\n"
                + $"//     version {toolVersion}\n"
                + (string.IsNullOrEmpty(sourceFileName) ? "" : $"//     from {sourceFileName}\n")
                + "//\n"
                + "//     Changes to this file may cause incorrect behavior and will be lost if\n"
                + "//     the code is regenerated.\n"
                + "// </auto-generated>\n"
                + "//------------------------------------------------------------------------------\n";
        }

        //================================================================================================================//
    }
}